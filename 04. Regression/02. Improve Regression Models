{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1zVWigee4wAs_U9Iybv8AS8ndNbf8NEZD","authorship_tag":"ABX9TyONJVZQiR406fgM9HAHyXRM"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Di data sebelumnya, plot error tidak balance sehingga kita harus melakukan kedua hal di bawah ini.\n","- transform datanya misalnya pakai scaling (MinMax, StandardScaler, RobustScaler, PowerTransformer).\n","- menambahkan fitur\n","- atau dapat juga ditingkatkan dengan menambah kompleksitas model yang awalnya linear menjadi polynomial"],"metadata":{"id":"VceDSTX9OWOY"}},{"cell_type":"markdown","source":["## Polynomial Illustration"],"metadata":{"id":"B9YNT5eqOmI2"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":175},"id":"i46S5rTGOL7m","executionInfo":{"status":"ok","timestamp":1713360259549,"user_tz":-420,"elapsed":1064,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}},"outputId":"dfa40adc-4bed-4906-b1be-4d67e11ef5ec"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   anak  gaji\n","0     2     5\n","1     6     9\n","2     3     1\n","3     9     8"],"text/html":["\n","  <div id=\"df-2885da3f-49f9-4eb8-b04b-0fdd2f163ef8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>anak</th>\n","      <th>gaji</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>6</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>9</td>\n","      <td>8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2885da3f-49f9-4eb8-b04b-0fdd2f163ef8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2885da3f-49f9-4eb8-b04b-0fdd2f163ef8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2885da3f-49f9-4eb8-b04b-0fdd2f163ef8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-52773a85-877b-45c3-8e7a-6929edee6190\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-52773a85-877b-45c3-8e7a-6929edee6190')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-52773a85-877b-45c3-8e7a-6929edee6190 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_temp","summary":"{\n  \"name\": \"df_temp\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"anak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2,\n        \"max\": 9,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          6,\n          9,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gaji\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          9,\n          8,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":1}],"source":["import pandas as pd\n","from sklearn.preprocessing import PolynomialFeatures\n","\n","df_temp = pd.DataFrame({'anak':[2,6,3,9],\n","                        'gaji':[5,9,1,8]})\n","df_temp"]},{"cell_type":"code","source":["poly_creator = PolynomialFeatures(degree=4)\n","poly_creator.fit(df_temp)\n","\n","\n","hasil_polynomial = poly_creator.transform(df_temp)\n","new_columns      = poly_creator.get_feature_names_out()\n","\n","pd.DataFrame(hasil_polynomial,columns=new_columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":175},"id":"deGqM2zpO2H_","executionInfo":{"status":"ok","timestamp":1713360728813,"user_tz":-420,"elapsed":8,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}},"outputId":"789efa8f-896e-4799-a719-dce9968eccc5"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     1  anak  gaji  anak^2  anak gaji  gaji^2  anak^3  anak^2 gaji  \\\n","0  1.0   2.0   5.0     4.0       10.0    25.0     8.0         20.0   \n","1  1.0   6.0   9.0    36.0       54.0    81.0   216.0        324.0   \n","2  1.0   3.0   1.0     9.0        3.0     1.0    27.0          9.0   \n","3  1.0   9.0   8.0    81.0       72.0    64.0   729.0        648.0   \n","\n","   anak gaji^2  gaji^3  anak^4  anak^3 gaji  anak^2 gaji^2  anak gaji^3  \\\n","0         50.0   125.0    16.0         40.0          100.0        250.0   \n","1        486.0   729.0  1296.0       1944.0         2916.0       4374.0   \n","2          3.0     1.0    81.0         27.0            9.0          3.0   \n","3        576.0   512.0  6561.0       5832.0         5184.0       4608.0   \n","\n","   gaji^4  \n","0   625.0  \n","1  6561.0  \n","2     1.0  \n","3  4096.0  "],"text/html":["\n","  <div id=\"df-dda7b737-0917-4e6a-b045-f591d7761a1a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>1</th>\n","      <th>anak</th>\n","      <th>gaji</th>\n","      <th>anak^2</th>\n","      <th>anak gaji</th>\n","      <th>gaji^2</th>\n","      <th>anak^3</th>\n","      <th>anak^2 gaji</th>\n","      <th>anak gaji^2</th>\n","      <th>gaji^3</th>\n","      <th>anak^4</th>\n","      <th>anak^3 gaji</th>\n","      <th>anak^2 gaji^2</th>\n","      <th>anak gaji^3</th>\n","      <th>gaji^4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>10.0</td>\n","      <td>25.0</td>\n","      <td>8.0</td>\n","      <td>20.0</td>\n","      <td>50.0</td>\n","      <td>125.0</td>\n","      <td>16.0</td>\n","      <td>40.0</td>\n","      <td>100.0</td>\n","      <td>250.0</td>\n","      <td>625.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>6.0</td>\n","      <td>9.0</td>\n","      <td>36.0</td>\n","      <td>54.0</td>\n","      <td>81.0</td>\n","      <td>216.0</td>\n","      <td>324.0</td>\n","      <td>486.0</td>\n","      <td>729.0</td>\n","      <td>1296.0</td>\n","      <td>1944.0</td>\n","      <td>2916.0</td>\n","      <td>4374.0</td>\n","      <td>6561.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>1.0</td>\n","      <td>9.0</td>\n","      <td>3.0</td>\n","      <td>1.0</td>\n","      <td>27.0</td>\n","      <td>9.0</td>\n","      <td>3.0</td>\n","      <td>1.0</td>\n","      <td>81.0</td>\n","      <td>27.0</td>\n","      <td>9.0</td>\n","      <td>3.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>9.0</td>\n","      <td>8.0</td>\n","      <td>81.0</td>\n","      <td>72.0</td>\n","      <td>64.0</td>\n","      <td>729.0</td>\n","      <td>648.0</td>\n","      <td>576.0</td>\n","      <td>512.0</td>\n","      <td>6561.0</td>\n","      <td>5832.0</td>\n","      <td>5184.0</td>\n","      <td>4608.0</td>\n","      <td>4096.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dda7b737-0917-4e6a-b045-f591d7761a1a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-dda7b737-0917-4e6a-b045-f591d7761a1a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-dda7b737-0917-4e6a-b045-f591d7761a1a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-37433192-63bb-4d5a-b470-5f0ff2a81e49\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-37433192-63bb-4d5a-b470-5f0ff2a81e49')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-37433192-63bb-4d5a-b470-5f0ff2a81e49 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"pd\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"anak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.1622776601683795,\n        \"min\": 2.0,\n        \"max\": 9.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gaji\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.593976442141304,\n        \"min\": 1.0,\n        \"max\": 9.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"anak^2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35.25620512760839,\n        \"min\": 4.0,\n        \"max\": 81.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          36.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"anak gaji\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 33.55964838909967,\n        \"min\": 3.0,\n        \"max\": 72.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          54.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gaji^2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 36.39024594585752,\n        \"min\": 1.0,\n        \"max\": 81.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          81.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"anak^3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 336.0505914293263,\n        \"min\": 8.0,\n        \"max\": 729.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          216.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"anak^2 gaji\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 302.6883711013689,\n        \"min\": 9.0,\n        \"max\": 648.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          324.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"anak gaji^2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 294.2078347019331,\n        \"min\": 3.0,\n        \"max\": 576.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          486.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gaji^3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 337.65798771340604,\n        \"min\": 1.0,\n        \"max\": 729.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          729.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"anak^4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3104.6537649148577,\n        \"min\": 16.0,\n        \"max\": 6561.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1296.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"anak^3 gaji\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2733.4670749800516,\n        \"min\": 27.0,\n        \"max\": 5832.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1944.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"anak^2 gaji^2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2485.9654563167205,\n        \"min\": 9.0,\n        \"max\": 5184.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2916.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"anak gaji^3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2523.670788751972,\n        \"min\": 3.0,\n        \"max\": 4608.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4374.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gaji^4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3076.146981208798,\n        \"min\": 1.0,\n        \"max\": 6561.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          6561.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":[],"metadata":{"id":"2rmeY3r6VdTV"}},{"cell_type":"markdown","source":["# 1. Extract Data"],"metadata":{"id":"4s7rrwV0Vdbv"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np"],"metadata":{"id":"wNr_Hu0KPs2r","executionInfo":{"status":"ok","timestamp":1713362065415,"user_tz":-420,"elapsed":2,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["df = pd.read_csv('/content/drive/MyDrive/Course Files/Course-Net/02. Kampus Merdeka/04. Regression/taxi_fare.csv')\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"VM31DjDnVlUt","executionInfo":{"status":"ok","timestamp":1713362110536,"user_tz":-420,"elapsed":862,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}},"outputId":"e33e927e-baa5-4e24-f960-2768e795820b"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   fare_amount      pickup_datetime  pickup_longitude  pickup_latitude  \\\n","0          4.5  2009-06-15 17:26:21        -73.844311        40.721319   \n","1         16.9  2010-01-05 16:52:16        -74.016048        40.711303   \n","2          5.7  2011-08-18 00:35:00        -73.982738        40.761270   \n","3          7.7  2012-04-21 04:30:42        -73.987130        40.733143   \n","4          5.3  2010-03-09 07:51:00        -73.968095        40.768008   \n","\n","   dropoff_longitude  dropoff_latitude  passenger_count  \n","0         -73.841610         40.712278              1.0  \n","1         -73.979268         40.782004              1.0  \n","2         -73.991242         40.750562              2.0  \n","3         -73.991567         40.758092              1.0  \n","4         -73.956655         40.783762              1.0  "],"text/html":["\n","  <div id=\"df-1a64fa4b-8726-4105-96dd-2e43f1fa97cc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fare_amount</th>\n","      <th>pickup_datetime</th>\n","      <th>pickup_longitude</th>\n","      <th>pickup_latitude</th>\n","      <th>dropoff_longitude</th>\n","      <th>dropoff_latitude</th>\n","      <th>passenger_count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4.5</td>\n","      <td>2009-06-15 17:26:21</td>\n","      <td>-73.844311</td>\n","      <td>40.721319</td>\n","      <td>-73.841610</td>\n","      <td>40.712278</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>16.9</td>\n","      <td>2010-01-05 16:52:16</td>\n","      <td>-74.016048</td>\n","      <td>40.711303</td>\n","      <td>-73.979268</td>\n","      <td>40.782004</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5.7</td>\n","      <td>2011-08-18 00:35:00</td>\n","      <td>-73.982738</td>\n","      <td>40.761270</td>\n","      <td>-73.991242</td>\n","      <td>40.750562</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>7.7</td>\n","      <td>2012-04-21 04:30:42</td>\n","      <td>-73.987130</td>\n","      <td>40.733143</td>\n","      <td>-73.991567</td>\n","      <td>40.758092</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.3</td>\n","      <td>2010-03-09 07:51:00</td>\n","      <td>-73.968095</td>\n","      <td>40.768008</td>\n","      <td>-73.956655</td>\n","      <td>40.783762</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1a64fa4b-8726-4105-96dd-2e43f1fa97cc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1a64fa4b-8726-4105-96dd-2e43f1fa97cc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1a64fa4b-8726-4105-96dd-2e43f1fa97cc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3bd9035a-390f-4400-b5a6-6c4eecaf5f37\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3bd9035a-390f-4400-b5a6-6c4eecaf5f37')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3bd9035a-390f-4400-b5a6-6c4eecaf5f37 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 18919,\n  \"fields\": [\n    {\n      \"column\": \"fare_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.551542391318053,\n        \"min\": -3.0,\n        \"max\": 180.0,\n        \"num_unique_values\": 476,\n        \"samples\": [\n          35.44,\n          9.7,\n          25.45000000000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pickup_datetime\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 18853,\n        \"samples\": [\n          \"2010-12-07 13:31:00\",\n          \"2010-05-21 10:19:00\",\n          \"2014-12-07 09:18:35\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pickup_longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.50353589495682,\n        \"min\": -74.438233,\n        \"max\": 40.766125,\n        \"num_unique_values\": 15896,\n        \"samples\": [\n          -73.98884699999998,\n          -73.959594,\n          -73.97946\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pickup_latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.715053116844981,\n        \"min\": -74.006893,\n        \"max\": 401.083332,\n        \"num_unique_values\": 16479,\n        \"samples\": [\n          40.687722,\n          40.767037,\n          40.64743\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff_longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.461398696963293,\n        \"min\": -84.654241,\n        \"max\": 40.802437,\n        \"num_unique_values\": 16077,\n        \"samples\": [\n          -73.98290300000002,\n          -73.967462,\n          -73.97253\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff_latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.160511062855227,\n        \"min\": -74.006377,\n        \"max\": 41.366138,\n        \"num_unique_values\": 16528,\n        \"samples\": [\n          40.764902,\n          40.745811,\n          40.728542\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"passenger_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2822356222534674,\n        \"min\": 0.0,\n        \"max\": 6.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1.0,\n          2.0,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["# 2. Feature Engineering\n","## 2.1. Feature Crossing - Jarak\n","Pickup di $(x_p,y_p)$ dan di drop-off di $(x_d,y_d)$.\n","\n","Karena kita menghitung jarak di bumi, mostly pakai _Manhanttan Distance_\n","\n","$$Jarak \\space Manhattan = |x_p - x_d| + |y_p - y_d|$$"],"metadata":{"id":"-T8aRYO-VzzF"}},{"cell_type":"code","source":["xp = df['pickup_latitude']\n","xd = df['dropoff_latitude']\n","\n","yp = df['pickup_longitude']\n","yd = df['dropoff_longitude']\n","\n","df['jarak'] = np.abs(xp-xd) + np.abs(yp-yd)\n","\n","df.drop(columns=['pickup_latitude','dropoff_latitude',\n","                 'pickup_longitude','dropoff_longitude'], inplace=True)"],"metadata":{"id":"EksO_pOGV3QV","executionInfo":{"status":"ok","timestamp":1713362694664,"user_tz":-420,"elapsed":289,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"kgxoFeMaYAcQ","executionInfo":{"status":"ok","timestamp":1713362704408,"user_tz":-420,"elapsed":6,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}},"outputId":"ff89f777-e148-43f5-95ef-fcb36a8f04b7"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   fare_amount      pickup_datetime  passenger_count     jarak\n","0          4.5  2009-06-15 17:26:21              1.0  0.011742\n","1         16.9  2010-01-05 16:52:16              1.0  0.107481\n","2          5.7  2011-08-18 00:35:00              2.0  0.019212\n","3          7.7  2012-04-21 04:30:42              1.0  0.029386\n","4          5.3  2010-03-09 07:51:00              1.0  0.027194"],"text/html":["\n","  <div id=\"df-3726bf3f-f49d-40fa-abe3-83d98fb915df\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fare_amount</th>\n","      <th>pickup_datetime</th>\n","      <th>passenger_count</th>\n","      <th>jarak</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4.5</td>\n","      <td>2009-06-15 17:26:21</td>\n","      <td>1.0</td>\n","      <td>0.011742</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>16.9</td>\n","      <td>2010-01-05 16:52:16</td>\n","      <td>1.0</td>\n","      <td>0.107481</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5.7</td>\n","      <td>2011-08-18 00:35:00</td>\n","      <td>2.0</td>\n","      <td>0.019212</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>7.7</td>\n","      <td>2012-04-21 04:30:42</td>\n","      <td>1.0</td>\n","      <td>0.029386</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.3</td>\n","      <td>2010-03-09 07:51:00</td>\n","      <td>1.0</td>\n","      <td>0.027194</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3726bf3f-f49d-40fa-abe3-83d98fb915df')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3726bf3f-f49d-40fa-abe3-83d98fb915df button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3726bf3f-f49d-40fa-abe3-83d98fb915df');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-71a0a37c-5bac-43da-aab5-31e0d880b285\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-71a0a37c-5bac-43da-aab5-31e0d880b285')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-71a0a37c-5bac-43da-aab5-31e0d880b285 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 18919,\n  \"fields\": [\n    {\n      \"column\": \"fare_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.551542391318053,\n        \"min\": -3.0,\n        \"max\": 180.0,\n        \"num_unique_values\": 476,\n        \"samples\": [\n          35.44,\n          9.7,\n          25.45000000000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pickup_datetime\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 18853,\n        \"samples\": [\n          \"2010-12-07 13:31:00\",\n          \"2010-05-21 10:19:00\",\n          \"2014-12-07 09:18:35\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"passenger_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2822356222534674,\n        \"min\": 0.0,\n        \"max\": 6.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1.0,\n          2.0,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"jarak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.053846033472167,\n        \"min\": 0.0,\n        \"max\": 360.308562,\n        \"num_unique_values\": 18063,\n        \"samples\": [\n          0.07710799999998841,\n          0.057834000000006824,\n          0.009127999999954284\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["## 2.2. Feature Extraction - Waktu"],"metadata":{"id":"Aji_WrRlYLNB"}},{"cell_type":"code","source":["## konversi tipe data menjadi datetime, supaya mudah untuk ekstraksi waktu\n","df['pickup_datetime'] = pd.to_datetime(df['pickup_datetime'])"],"metadata":{"id":"8LN5VyUwYBTM","executionInfo":{"status":"ok","timestamp":1713362927260,"user_tz":-420,"elapsed":5,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["df['year'] = df['pickup_datetime'].dt.year\n","df['month'] = df['pickup_datetime'].dt.month\n","df['hour'] = df['pickup_datetime'].dt.hour\n","df['dayofweek'] = df['pickup_datetime'].dt.dayofweek"],"metadata":{"id":"tMIxbqueYgcZ","executionInfo":{"status":"ok","timestamp":1713363211379,"user_tz":-420,"elapsed":2,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["df.drop(columns=['pickup_datetime'],inplace=True)"],"metadata":{"id":"stmHzcnpZDvP","executionInfo":{"status":"ok","timestamp":1713363213097,"user_tz":-420,"elapsed":2,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"XE-c8RFEZCHa","executionInfo":{"status":"ok","timestamp":1713363214315,"user_tz":-420,"elapsed":5,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}},"outputId":"043e2ef7-fa48-44d1-ada7-feb48545dbe1"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   fare_amount  passenger_count     jarak  year  month  hour  dayofweek\n","0          4.5              1.0  0.011742  2009      6    17          0\n","1         16.9              1.0  0.107481  2010      1    16          1\n","2          5.7              2.0  0.019212  2011      8     0          3\n","3          7.7              1.0  0.029386  2012      4     4          5\n","4          5.3              1.0  0.027194  2010      3     7          1"],"text/html":["\n","  <div id=\"df-967940bc-594b-4022-8008-c27c067bef7a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fare_amount</th>\n","      <th>passenger_count</th>\n","      <th>jarak</th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>hour</th>\n","      <th>dayofweek</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4.5</td>\n","      <td>1.0</td>\n","      <td>0.011742</td>\n","      <td>2009</td>\n","      <td>6</td>\n","      <td>17</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>16.9</td>\n","      <td>1.0</td>\n","      <td>0.107481</td>\n","      <td>2010</td>\n","      <td>1</td>\n","      <td>16</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5.7</td>\n","      <td>2.0</td>\n","      <td>0.019212</td>\n","      <td>2011</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>7.7</td>\n","      <td>1.0</td>\n","      <td>0.029386</td>\n","      <td>2012</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.3</td>\n","      <td>1.0</td>\n","      <td>0.027194</td>\n","      <td>2010</td>\n","      <td>3</td>\n","      <td>7</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-967940bc-594b-4022-8008-c27c067bef7a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-967940bc-594b-4022-8008-c27c067bef7a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-967940bc-594b-4022-8008-c27c067bef7a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-52bcacbd-4b69-4db6-9a75-f534a3aaedfc\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-52bcacbd-4b69-4db6-9a75-f534a3aaedfc')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-52bcacbd-4b69-4db6-9a75-f534a3aaedfc button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 18919,\n  \"fields\": [\n    {\n      \"column\": \"fare_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.551542391318053,\n        \"min\": -3.0,\n        \"max\": 180.0,\n        \"num_unique_values\": 476,\n        \"samples\": [\n          35.44,\n          9.7,\n          25.45000000000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"passenger_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2822356222534674,\n        \"min\": 0.0,\n        \"max\": 6.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1.0,\n          2.0,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"jarak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.053846033472167,\n        \"min\": 0.0,\n        \"max\": 360.308562,\n        \"num_unique_values\": 18063,\n        \"samples\": [\n          0.07710799999998841,\n          0.057834000000006824,\n          0.009127999999954284\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2009,\n          2010,\n          2014\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          5,\n          2,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hour\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          1,\n          21,\n          17\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dayofweek\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":29}]},{"cell_type":"markdown","source":["# 3. Data Splitting"],"metadata":{"id":"GQIkE2SPalPV"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","X = df.drop(columns=['fare_amount'])\n","y = df['fare_amount']\n","\n","X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)"],"metadata":{"id":"dvqvZoM6amuU","executionInfo":{"status":"ok","timestamp":1713363424578,"user_tz":-420,"elapsed":337,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}}},"execution_count":30,"outputs":[]},{"cell_type":"markdown","source":["# 4. Pipeline"],"metadata":{"id":"_Nph2Gyzazyj"}},{"cell_type":"code","source":["from sklearn.pipeline import Pipeline\n","from sklearn.compose import ColumnTransformer\n","\n","from sklearn.preprocessing import MinMaxScaler, OneHotEncoder, RobustScaler, PowerTransformer\n","from sklearn.impute import SimpleImputer\n","\n","from sklearn.linear_model import LinearRegression, Lasso, Ridge, ElasticNet\n","\n","\n","\n","num_preprocessor = Pipeline([(\"num_imputer\",SimpleImputer(strategy='median')),\n","                             (\"num_scaler\",PowerTransformer()),\n","                             (\"num_poly\",PolynomialFeatures())])\n","\n","cat_preprocessor = Pipeline([(\"cat_imputer\",SimpleImputer(strategy='most_frequent')),\n","                             (\"cat_encoder\",OneHotEncoder())])\n","\n","\n","num_columns = ['passenger_count','jarak','year','month','hour','dayofweek']\n","cat_columns = []\n","\n","\n","preprocess = ColumnTransformer([(\"num_pipe\",num_preprocessor,num_columns),\n","                                (\"cat_pipe\",cat_preprocessor,cat_columns)])\n","\n","# complete_pipeline = Pipeline([(\"preprocess\",preprocess),\n","#                               (\"model\",LinearRegression())])\n","\n","complete_pipeline = Pipeline([(\"preprocess\",preprocess),\n","                              (\"model\",Ridge())])"],"metadata":{"id":"7Yhw5t36a07U","executionInfo":{"status":"ok","timestamp":1713364883402,"user_tz":-420,"elapsed":3,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}}},"execution_count":86,"outputs":[]},{"cell_type":"markdown","source":["# 5. Modeling"],"metadata":{"id":"9Mluq2_dbIrD"}},{"cell_type":"code","source":["# complete_pipeline.get_params()"],"metadata":{"id":"1Zw7Wu9VbJ8d","executionInfo":{"status":"ok","timestamp":1713364888072,"user_tz":-420,"elapsed":6,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}}},"execution_count":87,"outputs":[]},{"cell_type":"code","source":["parameter_grid = {\n","    'preprocess__num_pipe__num_poly__degree' : [1,2]\n","}"],"metadata":{"id":"MAiynNeibL2F","executionInfo":{"status":"ok","timestamp":1713364888980,"user_tz":-420,"elapsed":5,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}}},"execution_count":88,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV\n","import time"],"metadata":{"id":"5EnNWjuMbtDf","executionInfo":{"status":"ok","timestamp":1713364888980,"user_tz":-420,"elapsed":4,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}}},"execution_count":89,"outputs":[]},{"cell_type":"code","source":["model = GridSearchCV(complete_pipeline,parameter_grid,\n","                     cv=5,verbose=1,n_jobs=-1)"],"metadata":{"id":"VX0mfjM-buq4","executionInfo":{"status":"ok","timestamp":1713364889275,"user_tz":-420,"elapsed":3,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}}},"execution_count":90,"outputs":[]},{"cell_type":"code","source":["start = time.time()\n","model.fit(X_train,y_train)\n","end   = time.time()\n","print(\"Time consumed : \",np.round(end-start,2),'s')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qSHIXYINbwHH","executionInfo":{"status":"ok","timestamp":1713364890898,"user_tz":-420,"elapsed":1625,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}},"outputId":"a5ca17cc-9d8e-4268-ddef-5da51800c3ed"},"execution_count":91,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 2 candidates, totalling 10 fits\n","Time consumed :  1.28 s\n"]}]},{"cell_type":"code","source":["model.best_params_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v1lBh07qc2z7","executionInfo":{"status":"ok","timestamp":1713364890899,"user_tz":-420,"elapsed":7,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}},"outputId":"95b17c91-238a-47fc-c631-ceaf7cf1cdd5"},"execution_count":92,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'preprocess__num_pipe__num_poly__degree': 2}"]},"metadata":{},"execution_count":92}]},{"cell_type":"markdown","source":["# 6. Evaluasi"],"metadata":{"id":"T27wWCWxcPoq"}},{"cell_type":"code","source":["from sklearn.metrics import mean_squared_error, mean_absolute_error\n","\n","def regression_model_performance(model,X,y_true,label=\"Training\"):\n","    print(\"Model Performance in Data\",label)\n","\n","    y_predicted = model.predict(X)\n","\n","    r2_score  = model.score(X,y_true)\n","    mae  = mean_absolute_error(y_true,y_predicted)\n","    mse  = mean_squared_error(y_true,y_predicted,squared=True)\n","    rmse = mean_squared_error(y_true,y_predicted,squared=False)\n","\n","\n","    print(\"R^2  :\",r2_score)\n","    print(\"MAE  :\",mae)\n","    print(\"MSE  :\",mse)\n","    print(\"RMSE :\",rmse)"],"metadata":{"id":"xv3zIBBsb3bL","executionInfo":{"status":"ok","timestamp":1713364890899,"user_tz":-420,"elapsed":5,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}}},"execution_count":93,"outputs":[]},{"cell_type":"code","source":["regression_model_performance(model,X_train,y_train,label=\"Training\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2Q6qLfyZcUB5","executionInfo":{"status":"ok","timestamp":1713364891743,"user_tz":-420,"elapsed":2,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}},"outputId":"7161661c-1d0f-4119-dc7c-afd5b836facc"},"execution_count":94,"outputs":[{"output_type":"stream","name":"stdout","text":["Model Performance in Data Training\n","R^2  : 0.6603756792553975\n","MAE  : 2.9085158895481356\n","MSE  : 31.520723108830346\n","RMSE : 5.614331937891662\n"]}]},{"cell_type":"code","source":["0.1*11"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iXlfXvUZdkfv","executionInfo":{"status":"ok","timestamp":1713364423439,"user_tz":-420,"elapsed":339,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}},"outputId":"f5866248-6078-4496-9c18-8df5e6326b9d"},"execution_count":71,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.1"]},"metadata":{},"execution_count":71}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","def plot_residual(model,X,y_true,label):\n","    y_predicted = model.predict(X)\n","\n","    residual = y_true - y_predicted\n","    x = np.arange(0,len(residual))\n","\n","    plt.scatter(x,residual)\n","    plt.axhline(c='r', label = 'Error = 0')\n","    plt.legend()\n","    plt.title(f\"Residual Plot in Data {label}\")\n","    plt.ylabel(\"residual\")\n","\n","plot_residual(model,X_train,y_train,\"Training\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"id":"6BCdDLv1cXrU","executionInfo":{"status":"ok","timestamp":1713364897465,"user_tz":-420,"elapsed":1129,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}},"outputId":"245ca714-630c-4a3d-9b68-b6fd12aa9c0a"},"execution_count":95,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# 7. Model Coefficient"],"metadata":{"id":"mOBHmfdid-xe"}},{"cell_type":"code","source":["final_model = model\n","\n","## Check Features\n","all_final_features = final_model.best_estimator_.named_steps['preprocess'].get_feature_names_out()\n","all_features = [item.split(\"__\")[1] for item in all_final_features]\n","\n","## Model Coefficient\n","coef_importance = final_model.best_estimator_.named_steps['model'].coef_\n","\n","## Model Intercept\n","intercept_value = final_model.best_estimator_.named_steps['model'].intercept_"],"metadata":{"id":"x4Yz0hljcqsS","executionInfo":{"status":"ok","timestamp":1713364900794,"user_tz":-420,"elapsed":280,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}}},"execution_count":96,"outputs":[]},{"cell_type":"code","source":["from colour import Color\n","import seaborn as sns\n","\n","color_list = list(Color(\"green\").range_to(Color(\"red\"),len(all_features)))\n","\n","\n","feature_importance = pd.DataFrame({'feature':all_features,\n","                                   'coef':coef_importance})\n","feature_importance.sort_values(by=['coef'],ascending=False,inplace=True)\n","\n","\n","\n","feature_importance[\"color\"] = color_list\n","sns.barplot(data=feature_importance,y='feature',x='coef')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":467},"id":"hrpdRxkAeHLB","executionInfo":{"status":"ok","timestamp":1713364903078,"user_tz":-420,"elapsed":584,"user":{"displayName":"Reynold Sinambela AI","userId":"01847770075785160243"}},"outputId":"3056b3e4-24c9-4ba9-a64e-006b0d89569f"},"execution_count":97,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='coef', ylabel='feature'>"]},"metadata":{},"execution_count":97},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["$y=ax_1 + bx_2$"],"metadata":{"id":"kp2c0Zb8fKxP"}},{"cell_type":"code","source":[],"metadata":{"id":"NSup-JDSeWYz"},"execution_count":null,"outputs":[]}]}